@use "sass:math";

@if index($hamburger-types, spring) {
  /*
   * Spring
   */
  .hamburger--spring {
    .hamburger-inner {
      top: math.div($hamburger-layer-height, 2);
      transition: background-color ($hamburger-scale-speed * 0s) ($hamburger-scale-speed * 0.13s) linear;

      &::before {
        top: $hamburger-layer-height + $hamburger-layer-spacing;
        transition: top ($hamburger-scale-speed * 0.1s) ($hamburger-scale-speed * 0.2s) cubic-bezier(0.33333, 0.66667, 0.66667, 1),
                    transform ($hamburger-scale-speed * 0.13s) cubic-bezier(0.55, 0.055, 0.675, 0.19);
      }

      &::after {
        top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
        transition: top ($hamburger-scale-speed * 0.2s) ($hamburger-scale-speed * 0.2s) cubic-bezier(0.33333, 0.66667, 0.66667, 1),
                    transform ($hamburger-scale-speed * 0.13s) cubic-bezier(0.55, 0.055, 0.675, 0.19);
      }
    }

    &.is-active {
      .hamburger-inner {
        transition-delay: ($hamburger-scale-speed * 0.22s);
        background-color: transparent !important;

        &::before {
          top: 0;
          transition: top ($hamburger-scale-speed * 0.1s) ($hamburger-scale-speed * 0.15s) cubic-bezier(0.33333, 0, 0.66667, 0.33333),
                      transform ($hamburger-scale-speed * 0.13s) ($hamburger-scale-speed * 0.22s) cubic-bezier(0.215, 0.61, 0.355, 1);
          transform: translate3d(0, $hamburger-layer-spacing + $hamburger-layer-height, 0) rotate(45deg);
        }

        &::after {
          top: 0;
          transition: top ($hamburger-scale-speed * 0.2s) cubic-bezier(0.33333, 0, 0.66667, 0.33333),
                      transform ($hamburger-scale-speed * 0.13s) ($hamburger-scale-speed * 0.22s) cubic-bezier(0.215, 0.61, 0.355, 1);
          transform: translate3d(0, $hamburger-layer-spacing + $hamburger-layer-height, 0) rotate(-45deg);
        }
      }
    }
  }
}
